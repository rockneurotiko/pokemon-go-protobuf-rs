// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct ItemAward {
    // message fields
    item_id: ::std::option::Option<ItemId>,
    item_count: ::std::option::Option<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ItemAward {}

impl ItemAward {
    pub fn new() -> ItemAward {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ItemAward {
        static mut instance: ::protobuf::lazy::Lazy<ItemAward> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ItemAward,
        };
        unsafe {
            instance.get(|| {
                ItemAward {
                    item_id: ::std::option::Option::None,
                    item_count: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .POGOProtos.Inventory.Item.ItemId item_id = 1;

    pub fn clear_item_id(&mut self) {
        self.item_id = ::std::option::Option::None;
    }

    pub fn has_item_id(&self) -> bool {
        self.item_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_id(&mut self, v: ItemId) {
        self.item_id = ::std::option::Option::Some(v);
    }

    pub fn get_item_id(&self) -> ItemId {
        self.item_id.unwrap_or(ItemId::ITEM_UNKNOWN)
    }

    // optional int32 item_count = 2;

    pub fn clear_item_count(&mut self) {
        self.item_count = ::std::option::Option::None;
    }

    pub fn has_item_count(&self) -> bool {
        self.item_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_count(&mut self, v: i32) {
        self.item_count = ::std::option::Option::Some(v);
    }

    pub fn get_item_count(&self) -> i32 {
        self.item_count.unwrap_or(0)
    }
}

impl ::protobuf::Message for ItemAward {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.item_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int32());
                    self.item_count = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.item_id {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        for value in &self.item_count {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.item_id {
            try!(os.write_enum(1, v.value()));
        };
        if let Some(v) = self.item_count {
            try!(os.write_int32(2, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ItemAward>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ItemAward {
    fn new() -> ItemAward {
        ItemAward::new()
    }

    fn descriptor_static(_: ::std::option::Option<ItemAward>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "item_id",
                    ItemAward::has_item_id,
                    ItemAward::get_item_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "item_count",
                    ItemAward::has_item_count,
                    ItemAward::get_item_count,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ItemAward>(
                    "ItemAward",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ItemAward {
    fn clear(&mut self) {
        self.clear_item_id();
        self.clear_item_count();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ItemAward {
    fn eq(&self, other: &ItemAward) -> bool {
        self.item_id == other.item_id &&
        self.item_count == other.item_count &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ItemAward {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ItemData {
    // message fields
    item_id: ::std::option::Option<ItemId>,
    count: ::std::option::Option<i32>,
    unseen: ::std::option::Option<bool>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ItemData {}

impl ItemData {
    pub fn new() -> ItemData {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ItemData {
        static mut instance: ::protobuf::lazy::Lazy<ItemData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ItemData,
        };
        unsafe {
            instance.get(|| {
                ItemData {
                    item_id: ::std::option::Option::None,
                    count: ::std::option::Option::None,
                    unseen: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .POGOProtos.Inventory.Item.ItemId item_id = 1;

    pub fn clear_item_id(&mut self) {
        self.item_id = ::std::option::Option::None;
    }

    pub fn has_item_id(&self) -> bool {
        self.item_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_id(&mut self, v: ItemId) {
        self.item_id = ::std::option::Option::Some(v);
    }

    pub fn get_item_id(&self) -> ItemId {
        self.item_id.unwrap_or(ItemId::ITEM_UNKNOWN)
    }

    // optional int32 count = 2;

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i32) {
        self.count = ::std::option::Option::Some(v);
    }

    pub fn get_count(&self) -> i32 {
        self.count.unwrap_or(0)
    }

    // optional bool unseen = 3;

    pub fn clear_unseen(&mut self) {
        self.unseen = ::std::option::Option::None;
    }

    pub fn has_unseen(&self) -> bool {
        self.unseen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unseen(&mut self, v: bool) {
        self.unseen = ::std::option::Option::Some(v);
    }

    pub fn get_unseen(&self) -> bool {
        self.unseen.unwrap_or(false)
    }
}

impl ::protobuf::Message for ItemData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.item_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int32());
                    self.count = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.unseen = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.item_id {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        for value in &self.count {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.unseen.is_some() {
            my_size += 2;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.item_id {
            try!(os.write_enum(1, v.value()));
        };
        if let Some(v) = self.count {
            try!(os.write_int32(2, v));
        };
        if let Some(v) = self.unseen {
            try!(os.write_bool(3, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ItemData>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ItemData {
    fn new() -> ItemData {
        ItemData::new()
    }

    fn descriptor_static(_: ::std::option::Option<ItemData>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "item_id",
                    ItemData::has_item_id,
                    ItemData::get_item_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "count",
                    ItemData::has_count,
                    ItemData::get_count,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "unseen",
                    ItemData::has_unseen,
                    ItemData::get_unseen,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ItemData>(
                    "ItemData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ItemData {
    fn clear(&mut self) {
        self.clear_item_id();
        self.clear_count();
        self.clear_unseen();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ItemData {
    fn eq(&self, other: &ItemData) -> bool {
        self.item_id == other.item_id &&
        self.count == other.count &&
        self.unseen == other.unseen &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ItemData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ItemId {
    ITEM_UNKNOWN = 0,
    ITEM_POKE_BALL = 1,
    ITEM_GREAT_BALL = 2,
    ITEM_ULTRA_BALL = 3,
    ITEM_MASTER_BALL = 4,
    ITEM_POTION = 101,
    ITEM_SUPER_POTION = 102,
    ITEM_HYPER_POTION = 103,
    ITEM_MAX_POTION = 104,
    ITEM_REVIVE = 201,
    ITEM_MAX_REVIVE = 202,
    ITEM_LUCKY_EGG = 301,
    ITEM_INCENSE_ORDINARY = 401,
    ITEM_INCENSE_SPICY = 402,
    ITEM_INCENSE_COOL = 403,
    ITEM_INCENSE_FLORAL = 404,
    ITEM_TROY_DISK = 501,
    ITEM_X_ATTACK = 602,
    ITEM_X_DEFENSE = 603,
    ITEM_X_MIRACLE = 604,
    ITEM_RAZZ_BERRY = 701,
    ITEM_BLUK_BERRY = 702,
    ITEM_NANAB_BERRY = 703,
    ITEM_WEPAR_BERRY = 704,
    ITEM_PINAP_BERRY = 705,
    ITEM_SPECIAL_CAMERA = 801,
    ITEM_INCUBATOR_BASIC_UNLIMITED = 901,
    ITEM_INCUBATOR_BASIC = 902,
    ITEM_POKEMON_STORAGE_UPGRADE = 1001,
    ITEM_ITEM_STORAGE_UPGRADE = 1002,
}

impl ::protobuf::ProtobufEnum for ItemId {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ItemId> {
        match value {
            0 => ::std::option::Option::Some(ItemId::ITEM_UNKNOWN),
            1 => ::std::option::Option::Some(ItemId::ITEM_POKE_BALL),
            2 => ::std::option::Option::Some(ItemId::ITEM_GREAT_BALL),
            3 => ::std::option::Option::Some(ItemId::ITEM_ULTRA_BALL),
            4 => ::std::option::Option::Some(ItemId::ITEM_MASTER_BALL),
            101 => ::std::option::Option::Some(ItemId::ITEM_POTION),
            102 => ::std::option::Option::Some(ItemId::ITEM_SUPER_POTION),
            103 => ::std::option::Option::Some(ItemId::ITEM_HYPER_POTION),
            104 => ::std::option::Option::Some(ItemId::ITEM_MAX_POTION),
            201 => ::std::option::Option::Some(ItemId::ITEM_REVIVE),
            202 => ::std::option::Option::Some(ItemId::ITEM_MAX_REVIVE),
            301 => ::std::option::Option::Some(ItemId::ITEM_LUCKY_EGG),
            401 => ::std::option::Option::Some(ItemId::ITEM_INCENSE_ORDINARY),
            402 => ::std::option::Option::Some(ItemId::ITEM_INCENSE_SPICY),
            403 => ::std::option::Option::Some(ItemId::ITEM_INCENSE_COOL),
            404 => ::std::option::Option::Some(ItemId::ITEM_INCENSE_FLORAL),
            501 => ::std::option::Option::Some(ItemId::ITEM_TROY_DISK),
            602 => ::std::option::Option::Some(ItemId::ITEM_X_ATTACK),
            603 => ::std::option::Option::Some(ItemId::ITEM_X_DEFENSE),
            604 => ::std::option::Option::Some(ItemId::ITEM_X_MIRACLE),
            701 => ::std::option::Option::Some(ItemId::ITEM_RAZZ_BERRY),
            702 => ::std::option::Option::Some(ItemId::ITEM_BLUK_BERRY),
            703 => ::std::option::Option::Some(ItemId::ITEM_NANAB_BERRY),
            704 => ::std::option::Option::Some(ItemId::ITEM_WEPAR_BERRY),
            705 => ::std::option::Option::Some(ItemId::ITEM_PINAP_BERRY),
            801 => ::std::option::Option::Some(ItemId::ITEM_SPECIAL_CAMERA),
            901 => ::std::option::Option::Some(ItemId::ITEM_INCUBATOR_BASIC_UNLIMITED),
            902 => ::std::option::Option::Some(ItemId::ITEM_INCUBATOR_BASIC),
            1001 => ::std::option::Option::Some(ItemId::ITEM_POKEMON_STORAGE_UPGRADE),
            1002 => ::std::option::Option::Some(ItemId::ITEM_ITEM_STORAGE_UPGRADE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ItemId] = &[
            ItemId::ITEM_UNKNOWN,
            ItemId::ITEM_POKE_BALL,
            ItemId::ITEM_GREAT_BALL,
            ItemId::ITEM_ULTRA_BALL,
            ItemId::ITEM_MASTER_BALL,
            ItemId::ITEM_POTION,
            ItemId::ITEM_SUPER_POTION,
            ItemId::ITEM_HYPER_POTION,
            ItemId::ITEM_MAX_POTION,
            ItemId::ITEM_REVIVE,
            ItemId::ITEM_MAX_REVIVE,
            ItemId::ITEM_LUCKY_EGG,
            ItemId::ITEM_INCENSE_ORDINARY,
            ItemId::ITEM_INCENSE_SPICY,
            ItemId::ITEM_INCENSE_COOL,
            ItemId::ITEM_INCENSE_FLORAL,
            ItemId::ITEM_TROY_DISK,
            ItemId::ITEM_X_ATTACK,
            ItemId::ITEM_X_DEFENSE,
            ItemId::ITEM_X_MIRACLE,
            ItemId::ITEM_RAZZ_BERRY,
            ItemId::ITEM_BLUK_BERRY,
            ItemId::ITEM_NANAB_BERRY,
            ItemId::ITEM_WEPAR_BERRY,
            ItemId::ITEM_PINAP_BERRY,
            ItemId::ITEM_SPECIAL_CAMERA,
            ItemId::ITEM_INCUBATOR_BASIC_UNLIMITED,
            ItemId::ITEM_INCUBATOR_BASIC,
            ItemId::ITEM_POKEMON_STORAGE_UPGRADE,
            ItemId::ITEM_ITEM_STORAGE_UPGRADE,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ItemId>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ItemId", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ItemId {
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ItemType {
    ITEM_TYPE_NONE = 0,
    ITEM_TYPE_POKEBALL = 1,
    ITEM_TYPE_POTION = 2,
    ITEM_TYPE_REVIVE = 3,
    ITEM_TYPE_MAP = 4,
    ITEM_TYPE_BATTLE = 5,
    ITEM_TYPE_FOOD = 6,
    ITEM_TYPE_CAMERA = 7,
    ITEM_TYPE_DISK = 8,
    ITEM_TYPE_INCUBATOR = 9,
    ITEM_TYPE_INCENSE = 10,
    ITEM_TYPE_XP_BOOST = 11,
    ITEM_TYPE_INVENTORY_UPGRADE = 12,
}

impl ::protobuf::ProtobufEnum for ItemType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ItemType> {
        match value {
            0 => ::std::option::Option::Some(ItemType::ITEM_TYPE_NONE),
            1 => ::std::option::Option::Some(ItemType::ITEM_TYPE_POKEBALL),
            2 => ::std::option::Option::Some(ItemType::ITEM_TYPE_POTION),
            3 => ::std::option::Option::Some(ItemType::ITEM_TYPE_REVIVE),
            4 => ::std::option::Option::Some(ItemType::ITEM_TYPE_MAP),
            5 => ::std::option::Option::Some(ItemType::ITEM_TYPE_BATTLE),
            6 => ::std::option::Option::Some(ItemType::ITEM_TYPE_FOOD),
            7 => ::std::option::Option::Some(ItemType::ITEM_TYPE_CAMERA),
            8 => ::std::option::Option::Some(ItemType::ITEM_TYPE_DISK),
            9 => ::std::option::Option::Some(ItemType::ITEM_TYPE_INCUBATOR),
            10 => ::std::option::Option::Some(ItemType::ITEM_TYPE_INCENSE),
            11 => ::std::option::Option::Some(ItemType::ITEM_TYPE_XP_BOOST),
            12 => ::std::option::Option::Some(ItemType::ITEM_TYPE_INVENTORY_UPGRADE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ItemType] = &[
            ItemType::ITEM_TYPE_NONE,
            ItemType::ITEM_TYPE_POKEBALL,
            ItemType::ITEM_TYPE_POTION,
            ItemType::ITEM_TYPE_REVIVE,
            ItemType::ITEM_TYPE_MAP,
            ItemType::ITEM_TYPE_BATTLE,
            ItemType::ITEM_TYPE_FOOD,
            ItemType::ITEM_TYPE_CAMERA,
            ItemType::ITEM_TYPE_DISK,
            ItemType::ITEM_TYPE_INCUBATOR,
            ItemType::ITEM_TYPE_INCENSE,
            ItemType::ITEM_TYPE_XP_BOOST,
            ItemType::ITEM_TYPE_INVENTORY_UPGRADE,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ItemType>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ItemType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ItemType {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x1f, 0x50, 0x4f, 0x47, 0x4f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x76,
    0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x12, 0x19, 0x50, 0x4f, 0x47, 0x4f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
    0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x66, 0x0a, 0x09,
    0x49, 0x74, 0x65, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x69, 0x74, 0x65,
    0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x50, 0x4f, 0x47,
    0x4f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
    0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x52, 0x06, 0x69,
    0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f,
    0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43,
    0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
    0x12, 0x3a, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x0e, 0x32, 0x21, 0x2e, 0x50, 0x4f, 0x47, 0x4f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49,
    0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x74,
    0x65, 0x6d, 0x49, 0x64, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
    0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
    0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x2a, 0xc7, 0x05, 0x0a, 0x06, 0x49,
    0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x4e,
    0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x54, 0x45, 0x4d, 0x5f,
    0x50, 0x4f, 0x4b, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49,
    0x54, 0x45, 0x4d, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x02,
    0x12, 0x13, 0x0a, 0x0f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x5f, 0x42,
    0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41,
    0x53, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
    0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x65, 0x12, 0x15, 0x0a, 0x11,
    0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x54, 0x49, 0x4f,
    0x4e, 0x10, 0x66, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x48, 0x59, 0x50, 0x45,
    0x52, 0x5f, 0x50, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x54,
    0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x68, 0x12,
    0x10, 0x0a, 0x0b, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x56, 0x45, 0x10, 0xc9,
    0x01, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45,
    0x56, 0x49, 0x56, 0x45, 0x10, 0xca, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x54, 0x45, 0x4d, 0x5f,
    0x4c, 0x55, 0x43, 0x4b, 0x59, 0x5f, 0x45, 0x47, 0x47, 0x10, 0xad, 0x02, 0x12, 0x1a, 0x0a, 0x15,
    0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x4f, 0x52, 0x44,
    0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x91, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d,
    0x5f, 0x49, 0x4e, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x43, 0x59, 0x10, 0x92,
    0x03, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x43, 0x45, 0x4e, 0x53,
    0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x10, 0x93, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x54, 0x45,
    0x4d, 0x5f, 0x49, 0x4e, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x52, 0x41, 0x4c,
    0x10, 0x94, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x52, 0x4f, 0x59,
    0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0xf5, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x54, 0x45, 0x4d,
    0x5f, 0x58, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0xda, 0x04, 0x12, 0x13, 0x0a, 0x0e,
    0x49, 0x54, 0x45, 0x4d, 0x5f, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x10, 0xdb,
    0x04, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x58, 0x5f, 0x4d, 0x49, 0x52, 0x41,
    0x43, 0x4c, 0x45, 0x10, 0xdc, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52,
    0x41, 0x5a, 0x5a, 0x5f, 0x42, 0x45, 0x52, 0x52, 0x59, 0x10, 0xbd, 0x05, 0x12, 0x14, 0x0a, 0x0f,
    0x49, 0x54, 0x45, 0x4d, 0x5f, 0x42, 0x4c, 0x55, 0x4b, 0x5f, 0x42, 0x45, 0x52, 0x52, 0x59, 0x10,
    0xbe, 0x05, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x41, 0x4e, 0x41, 0x42,
    0x5f, 0x42, 0x45, 0x52, 0x52, 0x59, 0x10, 0xbf, 0x05, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x54, 0x45,
    0x4d, 0x5f, 0x57, 0x45, 0x50, 0x41, 0x52, 0x5f, 0x42, 0x45, 0x52, 0x52, 0x59, 0x10, 0xc0, 0x05,
    0x12, 0x15, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x49, 0x4e, 0x41, 0x50, 0x5f, 0x42,
    0x45, 0x52, 0x52, 0x59, 0x10, 0xc1, 0x05, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x5f,
    0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0xa1,
    0x06, 0x12, 0x23, 0x0a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x43, 0x55, 0x42, 0x41,
    0x54, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4d, 0x49,
    0x54, 0x45, 0x44, 0x10, 0x85, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49,
    0x4e, 0x43, 0x55, 0x42, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x86,
    0x07, 0x12, 0x21, 0x0a, 0x1c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x4b, 0x45, 0x4d, 0x4f,
    0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44,
    0x45, 0x10, 0xe9, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x54, 0x45,
    0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44,
    0x45, 0x10, 0xea, 0x07, 0x2a, 0xb2, 0x02, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
    0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
    0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
    0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4b, 0x45, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a,
    0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x54, 0x49, 0x4f,
    0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
    0x5f, 0x52, 0x45, 0x56, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x54, 0x45,
    0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
    0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
    0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
    0x46, 0x4f, 0x4f, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
    0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e,
    0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x08,
    0x12, 0x17, 0x0a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
    0x43, 0x55, 0x42, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45,
    0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x0a,
    0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x50,
    0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x54, 0x45, 0x4d,
    0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
    0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x0c, 0x4a, 0xbd, 0x11, 0x0a, 0x06, 0x12, 0x04,
    0x00, 0x00, 0x3b, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08,
    0x0a, 0x01, 0x02, 0x12, 0x03, 0x01, 0x08, 0x21, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x04,
    0x04, 0x00, 0x23, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x00, 0x01, 0x12, 0x03, 0x04, 0x05, 0x0b,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12, 0x03, 0x05, 0x08, 0x19, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x05, 0x08, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x05, 0x17, 0x18, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02,
    0x01, 0x12, 0x03, 0x06, 0x08, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x06, 0x08, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x06,
    0x19, 0x1a, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x02, 0x12, 0x03, 0x07, 0x08, 0x1c, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x07, 0x08, 0x17, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x07, 0x1a, 0x1b, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x00, 0x02, 0x03, 0x12, 0x03, 0x08, 0x08, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x03,
    0x01, 0x12, 0x03, 0x08, 0x08, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x03, 0x02, 0x12,
    0x03, 0x08, 0x1a, 0x1b, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x04, 0x12, 0x03, 0x09, 0x08,
    0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x09, 0x08, 0x18, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03, 0x09, 0x1b, 0x1c, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x00, 0x02, 0x05, 0x12, 0x03, 0x0a, 0x08, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x05, 0x01, 0x12, 0x03, 0x0a, 0x08, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x05,
    0x02, 0x12, 0x03, 0x0a, 0x16, 0x19, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x06, 0x12, 0x03,
    0x0b, 0x08, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x06, 0x01, 0x12, 0x03, 0x0b, 0x08,
    0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x06, 0x02, 0x12, 0x03, 0x0b, 0x1c, 0x1f, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x07, 0x12, 0x03, 0x0c, 0x08, 0x20, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x07, 0x01, 0x12, 0x03, 0x0c, 0x08, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x07, 0x02, 0x12, 0x03, 0x0c, 0x1c, 0x1f, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x08,
    0x12, 0x03, 0x0d, 0x08, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x08, 0x01, 0x12, 0x03,
    0x0d, 0x08, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x08, 0x02, 0x12, 0x03, 0x0d, 0x1a,
    0x1d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x09, 0x12, 0x03, 0x0e, 0x08, 0x1a, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x09, 0x01, 0x12, 0x03, 0x0e, 0x08, 0x13, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x09, 0x02, 0x12, 0x03, 0x0e, 0x16, 0x19, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00,
    0x02, 0x0a, 0x12, 0x03, 0x0f, 0x08, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0a, 0x01,
    0x12, 0x03, 0x0f, 0x08, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0a, 0x02, 0x12, 0x03,
    0x0f, 0x1a, 0x1d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x0b, 0x12, 0x03, 0x10, 0x08, 0x1d,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0b, 0x01, 0x12, 0x03, 0x10, 0x08, 0x16, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x0b, 0x02, 0x12, 0x03, 0x10, 0x19, 0x1c, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x00, 0x02, 0x0c, 0x12, 0x03, 0x11, 0x08, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x0c, 0x01, 0x12, 0x03, 0x11, 0x08, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0c, 0x02,
    0x12, 0x03, 0x11, 0x20, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x0d, 0x12, 0x03, 0x12,
    0x08, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0d, 0x01, 0x12, 0x03, 0x12, 0x08, 0x1a,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0d, 0x02, 0x12, 0x03, 0x12, 0x1d, 0x20, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x00, 0x02, 0x0e, 0x12, 0x03, 0x13, 0x08, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x0e, 0x01, 0x12, 0x03, 0x13, 0x08, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x0e, 0x02, 0x12, 0x03, 0x13, 0x1c, 0x1f, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x0f, 0x12,
    0x03, 0x14, 0x08, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0f, 0x01, 0x12, 0x03, 0x14,
    0x08, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0f, 0x02, 0x12, 0x03, 0x14, 0x1e, 0x21,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x10, 0x12, 0x03, 0x15, 0x08, 0x1d, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x10, 0x01, 0x12, 0x03, 0x15, 0x08, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x10, 0x02, 0x12, 0x03, 0x15, 0x19, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02,
    0x11, 0x12, 0x03, 0x16, 0x08, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x11, 0x01, 0x12,
    0x03, 0x16, 0x08, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x11, 0x02, 0x12, 0x03, 0x16,
    0x18, 0x1b, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x12, 0x12, 0x03, 0x17, 0x08, 0x1d, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x12, 0x01, 0x12, 0x03, 0x17, 0x08, 0x16, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x12, 0x02, 0x12, 0x03, 0x17, 0x19, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x00, 0x02, 0x13, 0x12, 0x03, 0x18, 0x08, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x13,
    0x01, 0x12, 0x03, 0x18, 0x08, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x13, 0x02, 0x12,
    0x03, 0x18, 0x19, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x14, 0x12, 0x03, 0x19, 0x08,
    0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x14, 0x01, 0x12, 0x03, 0x19, 0x08, 0x17, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x14, 0x02, 0x12, 0x03, 0x19, 0x1a, 0x1d, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x00, 0x02, 0x15, 0x12, 0x03, 0x1a, 0x08, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x15, 0x01, 0x12, 0x03, 0x1a, 0x08, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x15,
    0x02, 0x12, 0x03, 0x1a, 0x1a, 0x1d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x16, 0x12, 0x03,
    0x1b, 0x08, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x16, 0x01, 0x12, 0x03, 0x1b, 0x08,
    0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x16, 0x02, 0x12, 0x03, 0x1b, 0x1b, 0x1e, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x17, 0x12, 0x03, 0x1c, 0x08, 0x1f, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x17, 0x01, 0x12, 0x03, 0x1c, 0x08, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x17, 0x02, 0x12, 0x03, 0x1c, 0x1b, 0x1e, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x18,
    0x12, 0x03, 0x1d, 0x08, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x18, 0x01, 0x12, 0x03,
    0x1d, 0x08, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x18, 0x02, 0x12, 0x03, 0x1d, 0x1b,
    0x1e, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x19, 0x12, 0x03, 0x1e, 0x08, 0x22, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x19, 0x01, 0x12, 0x03, 0x1e, 0x08, 0x1b, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x19, 0x02, 0x12, 0x03, 0x1e, 0x1e, 0x21, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00,
    0x02, 0x1a, 0x12, 0x03, 0x1f, 0x08, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x1a, 0x01,
    0x12, 0x03, 0x1f, 0x08, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x1a, 0x02, 0x12, 0x03,
    0x1f, 0x29, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x1b, 0x12, 0x03, 0x20, 0x08, 0x23,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x1b, 0x01, 0x12, 0x03, 0x20, 0x08, 0x1c, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x1b, 0x02, 0x12, 0x03, 0x20, 0x1f, 0x22, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x00, 0x02, 0x1c, 0x12, 0x03, 0x21, 0x08, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x1c, 0x01, 0x12, 0x03, 0x21, 0x08, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x1c, 0x02,
    0x12, 0x03, 0x21, 0x27, 0x2b, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x1d, 0x12, 0x03, 0x22,
    0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x1d, 0x01, 0x12, 0x03, 0x22, 0x08, 0x21,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x1d, 0x02, 0x12, 0x03, 0x22, 0x24, 0x28, 0x0a, 0x0a,
    0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x24, 0x00, 0x27, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00,
    0x01, 0x12, 0x03, 0x24, 0x08, 0x11, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03,
    0x25, 0x08, 0x36, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x04, 0x25, 0x08,
    0x24, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x25, 0x08, 0x29,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x25, 0x2a, 0x31, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x25, 0x34, 0x35, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x26, 0x08, 0x1d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x01, 0x04, 0x12, 0x04, 0x26, 0x08, 0x25, 0x36, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01,
    0x05, 0x12, 0x03, 0x26, 0x08, 0x0d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x26, 0x0e, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x26,
    0x1b, 0x1c, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x01, 0x12, 0x04, 0x28, 0x00, 0x36, 0x01, 0x0a, 0x0a,
    0x0a, 0x03, 0x05, 0x01, 0x01, 0x12, 0x03, 0x28, 0x05, 0x0d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01,
    0x02, 0x00, 0x12, 0x03, 0x29, 0x08, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x29, 0x08, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x02, 0x12, 0x03,
    0x29, 0x19, 0x1a, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x01, 0x12, 0x03, 0x2a, 0x08, 0x1f,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2a, 0x08, 0x1a, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x01, 0x02, 0x01, 0x02, 0x12, 0x03, 0x2a, 0x1d, 0x1e, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x01, 0x02, 0x02, 0x12, 0x03, 0x2b, 0x08, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x2b, 0x08, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x02,
    0x12, 0x03, 0x2b, 0x1b, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x03, 0x12, 0x03, 0x2c,
    0x08, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x03, 0x01, 0x12, 0x03, 0x2c, 0x08, 0x18,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x03, 0x02, 0x12, 0x03, 0x2c, 0x1b, 0x1c, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x01, 0x02, 0x04, 0x12, 0x03, 0x2d, 0x08, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x01, 0x02, 0x04, 0x01, 0x12, 0x03, 0x2d, 0x08, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02,
    0x04, 0x02, 0x12, 0x03, 0x2d, 0x18, 0x19, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x05, 0x12,
    0x03, 0x2e, 0x08, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x05, 0x01, 0x12, 0x03, 0x2e,
    0x08, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x05, 0x02, 0x12, 0x03, 0x2e, 0x1b, 0x1c,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x06, 0x12, 0x03, 0x2f, 0x08, 0x1b, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x06, 0x01, 0x12, 0x03, 0x2f, 0x08, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x01, 0x02, 0x06, 0x02, 0x12, 0x03, 0x2f, 0x19, 0x1a, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02,
    0x07, 0x12, 0x03, 0x30, 0x08, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x07, 0x01, 0x12,
    0x03, 0x30, 0x08, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x07, 0x02, 0x12, 0x03, 0x30,
    0x1b, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x08, 0x12, 0x03, 0x31, 0x08, 0x1b, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x08, 0x01, 0x12, 0x03, 0x31, 0x08, 0x16, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x08, 0x02, 0x12, 0x03, 0x31, 0x19, 0x1a, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x01, 0x02, 0x09, 0x12, 0x03, 0x32, 0x08, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x09,
    0x01, 0x12, 0x03, 0x32, 0x08, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x09, 0x02, 0x12,
    0x03, 0x32, 0x1e, 0x1f, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x0a, 0x12, 0x03, 0x33, 0x08,
    0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x33, 0x08, 0x19, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x0a, 0x02, 0x12, 0x03, 0x33, 0x1c, 0x1e, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x01, 0x02, 0x0b, 0x12, 0x03, 0x34, 0x08, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01,
    0x02, 0x0b, 0x01, 0x12, 0x03, 0x34, 0x08, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x0b,
    0x02, 0x12, 0x03, 0x34, 0x1d, 0x1f, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x0c, 0x12, 0x03,
    0x35, 0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x0c, 0x01, 0x12, 0x03, 0x35, 0x08,
    0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x0c, 0x02, 0x12, 0x03, 0x35, 0x26, 0x28, 0x0a,
    0x0a, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x37, 0x00, 0x3b, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x01, 0x01, 0x12, 0x03, 0x37, 0x08, 0x10, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12,
    0x03, 0x38, 0x08, 0x36, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x04, 0x38,
    0x08, 0x37, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12, 0x03, 0x38, 0x08,
    0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x38, 0x2a, 0x31, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x38, 0x34, 0x35, 0x0a, 0x0b, 0x0a,
    0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x39, 0x08, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x01, 0x04, 0x12, 0x04, 0x39, 0x08, 0x38, 0x36, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x01, 0x05, 0x12, 0x03, 0x39, 0x08, 0x0d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x39, 0x0e, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03,
    0x39, 0x16, 0x17, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x3a, 0x08, 0x18,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x04, 0x12, 0x04, 0x3a, 0x08, 0x39, 0x18, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x05, 0x12, 0x03, 0x3a, 0x08, 0x0c, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x3a, 0x0d, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x02, 0x03, 0x12, 0x03, 0x3a, 0x16, 0x17, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x33,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
